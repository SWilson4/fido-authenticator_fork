#![no_std]

use cty::c_int;

pub const PQCLEAN_DILITHIUM3_CLEAN_CRYPTO_PUBLICKEYBYTES: u32 = 1952;
pub const PQCLEAN_DILITHIUM3_CLEAN_CRYPTO_SECRETKEYBYTES: u32 = 4000;
pub const PQCLEAN_DILITHIUM3_CLEAN_CRYPTO_BYTES: u32 = 3293;
pub const PQCLEAN_DILITHIUM3_CLEAN_CRYPTO_ALGNAME: &[u8; 11usize] = b"Dilithium3\0";

pub const  PQCLEAN_KYBER768_CLEAN_CRYPTO_SECRETKEYBYTES: u32 =  2400;
pub const  PQCLEAN_KYBER768_CLEAN_CRYPTO_PUBLICKEYBYTES: u32 =  1184;
pub const  PQCLEAN_KYBER768_CLEAN_CRYPTO_CIPHERTEXTBYTES: u32 = 1088;
pub const  PQCLEAN_KYBER768_CLEAN_CRYPTO_BYTES: u32 = 32;
pub const  PQCLEAN_KYBER768_CLEAN_CRYPTO_ALGNAME: &[u8; 9usize] = b"Kyber768\0";

pub fn sb_pqclean_kyber768_clean_crypto_sign_keypair() -> ([u8;PQCLEAN_KYBER768_CLEAN_CRYPTO_PUBLICKEYBYTES as usize], [u8;PQCLEAN_KYBER768_CLEAN_CRYPTO_SECRETKEYBYTES as usize]) {
    let mut pk = [0; PQCLEAN_KYBER768_CLEAN_CRYPTO_PUBLICKEYBYTES as usize];
    let mut sk = [0; PQCLEAN_KYBER768_CLEAN_CRYPTO_SECRETKEYBYTES as usize];
    unsafe {
        PQCLEAN_KYBER768_CLEAN_crypto_kem_keypair(&mut pk as *mut _, &mut sk as *mut _);
    }
    (pk,sk)
}

pub fn sb_pqclean_kyber768_clean_crypto_kem_enc(
    ct: &mut [u8; PQCLEAN_KYBER768_CLEAN_CRYPTO_CIPHERTEXTBYTES as usize],
    ss: &mut [u8; 32 as usize],
    pk: &[u8; PQCLEAN_KYBER768_CLEAN_CRYPTO_PUBLICKEYBYTES as usize],
) {
    unsafe {
        PQCLEAN_KYBER768_CLEAN_crypto_kem_enc(ct as *mut _, ss as *mut _, pk.as_ptr() );
    }
}

pub fn sb_pqclean_kyber768_clean_crypto_kem_dec(
    ss: &mut [u8; 32 as usize],
    ct: &[u8; PQCLEAN_KYBER768_CLEAN_CRYPTO_CIPHERTEXTBYTES as usize],
    sk: &[u8; PQCLEAN_KYBER768_CLEAN_CRYPTO_SECRETKEYBYTES as usize],
) {
    unsafe {
        PQCLEAN_KYBER768_CLEAN_crypto_kem_dec(ss as *mut _, ct.as_ptr(), sk.as_ptr() );
    }
}

pub fn sb_pqclean_dilithium3_clean_crypto_sign_keypair(
    pk: &mut [u8; PQCLEAN_DILITHIUM3_CLEAN_CRYPTO_PUBLICKEYBYTES as usize],
    sk: &mut [u8; PQCLEAN_DILITHIUM3_CLEAN_CRYPTO_SECRETKEYBYTES as usize],
) {
    unsafe {
        PQCLEAN_DILITHIUM3_CLEAN_crypto_sign_keypair(pk as *mut _, sk as *mut _);
    }
}


pub fn sb_pqclean_dilithium3_clean_crypto_sign_signature(
    m: &[u8], 
    sk: &[u8;PQCLEAN_DILITHIUM3_CLEAN_CRYPTO_SECRETKEYBYTES as usize],
    sig: &mut [u8;PQCLEAN_DILITHIUM3_CLEAN_CRYPTO_BYTES as usize],
    siglen: &mut usize
    ) {
    unsafe {
        PQCLEAN_DILITHIUM3_CLEAN_crypto_sign_signature(sig as *mut _, siglen as *mut _, m.as_ptr(), m.len() as usize, sk.as_ptr());
    }
}

pub fn sb_pqclean_dilithium3_clean_crypto_sign_verify(sig: &[u8;PQCLEAN_DILITHIUM3_CLEAN_CRYPTO_BYTES as usize], m: &[u8], pk: &[u8;PQCLEAN_DILITHIUM3_CLEAN_CRYPTO_PUBLICKEYBYTES as usize]) -> bool {
    let res;
    unsafe {
        res = PQCLEAN_DILITHIUM3_CLEAN_crypto_sign_verify(sig.as_ptr(), sig.len(), m.as_ptr(), m.len(), pk.as_ptr());
    }
    res == 0
}

/* automatically generated by rust-bindgen 0.65.1 */

extern "C" {
    pub fn PQCLEAN_KYBER768_CLEAN_crypto_kem_keypair(
        pk: *mut u8,
        sk: *mut u8,
    ) -> c_int;
}

extern "C" {
    pub fn PQCLEAN_KYBER768_CLEAN_crypto_kem_enc(
        ct: *mut u8,
        ss: *mut u8,
        pk: *const u8,
    ) -> c_int;
}

extern "C" {
    pub fn PQCLEAN_KYBER768_CLEAN_crypto_kem_dec(
        ss: *mut u8,
        ct: *const u8,
        sk: *const u8,
    ) -> c_int;
}

extern "C" {
    pub fn PQCLEAN_DILITHIUM3_CLEAN_crypto_sign_keypair(
        pk: *mut u8,
        sk: *mut u8,
    ) -> c_int;
}
extern "C" {
    pub fn PQCLEAN_DILITHIUM3_CLEAN_crypto_sign_signature(
        sig: *mut u8,
        siglen: *mut usize,
        m: *const u8,
        mlen: usize,
        sk: *const u8,
    ) -> c_int;
}
extern "C" {
    pub fn PQCLEAN_DILITHIUM3_CLEAN_crypto_sign_verify(
        sig: *const u8,
        siglen: usize,
        m: *const u8,
        mlen: usize,
        pk: *const u8,
    ) -> c_int;
}
extern "C" {
    pub fn PQCLEAN_DILITHIUM3_CLEAN_crypto_sign(
        sm: *mut u8,
        smlen: *mut usize,
        m: *const u8,
        mlen: usize,
        sk: *const u8,
    ) -> c_int;
}
extern "C" {
    pub fn PQCLEAN_DILITHIUM3_CLEAN_crypto_sign_open(
        m: *mut u8,
        mlen: *mut usize,
        sm: *const u8,
        smlen: usize,
        pk: *const u8,
    ) -> c_int;
}